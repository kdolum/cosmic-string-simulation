(in-package "CL-USER")
;;This is the same as what's in Numerical Recipes, with added declarations, REAL-SQRT,
;;and a condition type for the error

(define-condition svdcmp-not-converging-error (error)
  ()
  (:report (lambda (condition stream)
	     (declare (ignore condition))
	     (format stream "no convergence in 30 iterations of svdcmp"))))

(defun svdcmp (a)
  (declare (type (simple-array double-float (* *)) a))

  (prog*
    ((m (array-dimension a 0))
     (n (array-dimension a 1))
     
     (w (make-array n :element-type 'double-float :initial-element 0d0))
     (v (make-array (list n n) 
                :element-type 'double-float :initial-element 0d0))
     (rv1 (make-array n :element-type 'double-float :initial-element 0d0))
     (g 0d0) (scale 0d0) (anorm 0d0) (s 0d0) (h 0d0) (f 0d0) (c 0d0) 
     (x 0d0) (y 0d0) (z 0d0) (l 0) (ll 0) (nm 0) (i 0))
    (declare (type fixnum l ll m n nm i))
    (declare (type double-float c anorm f g h s scale x y z))
    (declare (type (simple-array double-float (*)) w))
    (declare (type (simple-array double-float (*)) rv1))
    (declare (type (simple-array double-float (* *)) v))
  
  (do ((i 1 (+ i 1)))
      ((> i n) t)
    (declare (optimize speed))
    (declare (type fixnum i))

    (setf l (+ i 1))
    (setf (fref rv1 i) (* scale g))
    (setf g 0d0)
    (setf s 0d0)
    (setf scale 0d0)
    (when (<= i m)
      (do ((k i (+ k 1)))
          ((> k m) t)
          (declare (type fixnum k))
        (setf scale (+ scale (abs (fref a k i)))))
      (when (not (= scale 0d0)) 
        (do ((k i (+ k 1)))
            ((> k m) t)
            (declare (type fixnum k))
          (setf (fref a k i) (/ (fref a k i) scale))
          (setf s (+ s (* (fref a k i) (fref a k i)))))

        (setf f (fref a i i))
        (setf g (- (signp (the double-float (real-sqrt s)) f)))
        (setf h (+ (* f g) (- s)))
        (setf (fref a i i) (+ f (- g)))
        (when (not (= i n)) 
          (do ((j l (+ j 1)))
              ((> j n) t)
              (declare (type fixnum j))
            (setf s 0d0)
            (do ((k i (+ k 1)))
                ((> k m) t)
                (declare (type fixnum k))
              (setf s (+ s (* (fref a k i) (fref a k j)))))

            (setf f (/ s h))
            (do ((k i (+ k 1)))
                ((> k m) t)
               (declare (type fixnum k))
              (setf (fref a k j) (+ (fref a k j) (* f (fref a k i)))))))

        (do ((k i (+ k 1)))
            ((> k m) t)
            (declare (type fixnum k))
        (setf (fref a k i) (* scale (fref a k i))))))
;-------------------------------------------
    (setf (fref w i) (* scale g))
    (setf g 0d0)
    (setf s 0d0)
    (setf scale 0d0)
    (when (and (<= i m) (not (= i n))) 
      (do ((k l (+ k 1)))
          ((> k n) t)
          (declare (type fixnum k))
        (setf scale (+ scale (abs (fref a i k)))))

      (when (not (= scale 0d0)) 
        (do ((k l (+ k 1)))
            ((> k n) t)
            (declare (type fixnum k))
          (setf (fref a i k) (/ (fref a i k) scale))
          (setf s (+ s (* (fref a i k) (fref a i k)))))

        (setf f (fref a i l))
        (setf g (- (signp (the double-float (real-sqrt s)) f)))
        (setf h (+ (* f g) (- s)))
        (setf (fref a i l) (+ f (- g)))
        (do ((k l (+ k 1)))
            ((> k n) t)
            (declare (type fixnum k))
        (setf (fref rv1 k) (/ (fref a i k) h)))

        (when (not (= i m)) 
          (do ((j l (+ j 1)))
              ((> j m) t)
              (declare (type fixnum j))
            (setf s 0d0)
           (do ((k l (+ k 1)))
                ((> k n) t)
               (declare (type fixnum k))
              (setf s (+ s (* (fref a j k) (fref a i k)))))

            (do ((k l (+ k 1)))
                ((> k n) t)
                (declare (type fixnum k))
            (setf (fref a j k) (+ (fref a j k) (* s (fref rv1 k)))))))

        (do ((k l (+ k 1)))
            ((> k n) t)
            (declare (type fixnum k))
          (setf (fref a i k) (* scale (fref a i k))))))


    (setf anorm (max anorm (+ (abs (fref w i)) (abs (fref rv1 i))))))
;=============================================  

  (do ((i n (+ i (- 1))))
        ((< i 1) t)
       (declare (type fixnum i))
    (when (< i n) 
      (when (not (= g 0d0)) 
        (do ((j l (+ j 1)))
            ((> j n) t)
            (declare (type fixnum j))
          (setf (fref v j i) (/ (/ (fref a i j) (fref a i l)) g)))

        (do ((j l (+ j 1)))
            ((> j n) t)
            (declare (type fixnum j))
          (setf s 0d0)
          (do ((k l (+ k 1)))
              ((> k n) t)
              (declare (type fixnum k))
            (setf s (+ s (* (fref a i k) (fref v k j)))))

          (do ((k l (+ k 1)))
              ((> k n) t)
              (declare (type fixnum k))
            (setf (fref v k j) (+ (fref v k j) (* s (fref v k i)))))))

      (do ((j l (+ j 1)))
          ((> j n) t)
          (declare (type fixnum j))
        (setf (fref v i j) 0d0)
        (setf (fref v j i) 0d0)))

    (setf (fref v i i) 1d0)
    (setf g (fref rv1 i))
    (setf l i))
;**********************************
  (do ((i n (+ i (- 1))))
      ((< i 1) t)
      (declare (type fixnum i))
    (setf l (+ i 1))
    (setf g (fref w i))
    (when (< i n) 
      (do ((j l (+ j 1)))
          ((> j n) t)
          (declare (type fixnum j))
        (setf (fref a i j) 0d0)))

    (cond ((not (= g 0d0))
      (setf g (/ 1d0 g))
      (when (not (= i n)) 
        (do ((j l (+ j 1)))
            ((> j n) t)
            (declare (type fixnum j))
          (setf s 0d0)
          (do ((k l (+ k 1)))
              ((> k m) t)
              (declare (type fixnum k))
              (setf s (+ s (* (fref a k i) (fref a k j)))))

          (setf f (* (/ s (fref a i i)) g))
          (do ((k i (+ k 1)))
             ((> k m) t)
             (declare (type fixnum k))
          (setf (fref a k j) (+ (fref a k j) (* f (fref a k i)))))))

      (do ((j i (+ j 1)))
          ((> j m) t)
          (declare (type fixnum j))
        (setf (fref a j i) (* (fref a j i) g))))

    (t
      (do ((j i (+ j 1)))
          ((> j m) t)
          (declare (type fixnum j))
        (setf (fref a j i) 0d0))))

    (setf (fref a i i) (+ (fref a i i) 1d0)))
;----------------------------------------------------------

  (do ((k n (+ k (- 1))))
      ((< k 1) t)
      (declare (type fixnum k))
    (do ((its 1 (+ its 1)))
        ((> its 30) t)
        (declare (type fixnum its))
        (do ((l k (1- l)))
            ((< l 1) t)
            (declare (type fixnum l))
          (setf nm (1- l))
          (setq ll l)
          (when (= anorm (+ (abs (fref rv1 l)) anorm)) (go label2))
           (when (= anorm (+ (abs (fref w nm)) anorm)) (go label1)))


label1
        (setf c 0d0)
        (setf s 1d0)
        (do ((i ll (+ i 1)))
            ((> i k) t)
            (declare (type fixnum i))
          (setf f (* s (fref rv1 i)))
          (setf (fref rv1 i) (* c (fref rv1 i)))
          (when (= anorm (+ (abs f) anorm)) (go label2))
          (setf g (fref w i))
          (setf h (the double-float (real-sqrt (+ (* f f) (* g g)))))
          (setf (fref w i) h)
          (setf h (/ 1d0 h))
          (setf c (* g h))
          (setf s (- (* f h)))

          (do ((j 1 (+ j 1)))
              ((> j m) t)
              (declare (type fixnum j))
            (setf y (fref a j nm))
            (setf z (fref a j i))
            (setf (fref a j nm) (+ (* y c) (* z s)))
            (setf (fref a j i) (+ (- (* y s)) (* z c)))))

label2

        (setf z (fref w k))
        (when (= ll k) 
          (when (< z 0d0) 
            (setf (fref w k) (- z))
            (do ((j 1 (+ j 1)))
                ((> j n) t)
                (declare (type fixnum j))
              (setf (fref v j k) (- (fref v j k)))))
          (go label3))

        (if (= its 30) (error 'svdcmp-not-converging-error))
        (setf x (fref w ll))
        (setf nm (+ k (- 1)))
        (setf y (fref w nm))
        (setf g (fref rv1 nm))
        (setf h (fref rv1 k))
        (setf f
              (/ (+ (* (+ y (- z)) (+ y z)) (* (+ g (- h)) (+ g h)))
                 (* (* 2d0 h) y)))
        (setf g (the double-float (real-sqrt (+ (* f f) 1.0d0))))

        (setf f
              (/
               (+ (* (+ x (- z)) (+ x z))
                  (* h (+ (/ y (+ f (signp g f))) (- h))))
               x))
        (setf c 1d0)
        (setf s 1d0)
        (do ((j ll (+ j 1)))
            ((> j nm) t)
            (declare (type fixnum j))
          (setf i (+ j 1))
          (setf g (fref rv1 i))
          (setf y (fref w i))
          (setf h (* s g))
          (setf g (* c g))
          (setf z (the double-float (real-sqrt (+ (* f f) (* h h)))))
          (setf (fref rv1 j) z)
          (setf c (/ f z))
          (setf s (/ h z))
          (setf f (+ (* x c) (* g s)))
          (setf g (+ (- (* x s)) (* g c)))
          (setf h (* y s))
          (setf y (* y c))

          (do ((jj 1 (+ jj 1)))
              ((> jj n) t)
              (declare (type fixnum jj))
            (setf x (fref v jj j))
            (setf z (fref v jj i))
            (setf (fref v jj j) (+ (* x c) (* z s)))
            (setf (fref v jj i) (+ (- (* x s)) (* z c))))

          (setf z (the double-float (real-sqrt (+ (* f f) (* h h)))))
          (setf (fref w j) z)

          (when (not (= z 0d0)) 
            (setf z (/ 1d0 z))
            (setf c (* f z))
            (setf s (* h z)))

          (setf f (+ (* c g) (* s y)))
          (setf x (+ (- (* s g)) (* c y)))
          (do ((jj 1 (+ jj 1)))
              ((> jj m) t)
              (declare (type fixnum jj))
            (setf y (fref a jj j))
            (setf z (fref a jj i))
            (setf (fref a jj j) (+ (* y c) (* z s)))
            (setf (fref a jj i) (+ (- (* y s)) (* z c)))))
    (setf (fref rv1 ll) 0d0)
    (setf (fref rv1 k) f)
    (setf (fref w k) x))
  label3)
(return (values a w v))))

(defun svbksb (u w v b)
 (declare (type (simple-array double-float (* *)) u)) 
 (declare (type (simple-array double-float (*)) w)) 
 (declare (type (simple-array double-float (* *)) v)) 
 (declare (type (simple-array double-float (*)) b)) 

 (prog* (
  (n (array-dimension w 0))
  (m (array-dimension b 0))
  (x (make-array n :element-type 'double-float :initial-element 0d0))
  (tmp (make-array n :element-type 'double-float :initial-element 0d0))
  (s 0d0))

  (declare (type (simple-array double-float (*)) x)) 
  (declare (type (simple-array double-float (*)) tmp)) 
  (declare (type fixnum m n))
  (declare (type double-float s))


  (do ((j 0 (+ j 1)))
      ((> j (1- n)) t)
      (declare (type fixnum j))
    (setf s 0d0)
    (when 
     (not (= (aref w j) 0d0))
     (do ((i 0 (+ i 1)))
         ((> i (1- m)) t)
         (declare (type fixnum i))
       (setf s (+ s (* (aref u i j) (aref b i)))))

     (setf s (/ s (aref w j))))

    (setf (aref tmp j) s)) 

  (do ((j 0 (+ j 1)))
      ((> j (1- n)) t)
      (declare (type fixnum j))
    (setf s 0d0)
    (do ((jj 0 (+ jj 1)))
        ((> jj (1- n)) t)
        (declare (type fixnum jj))
      (setf s (+ s (* (aref v j jj) (aref tmp jj)))))
    (setf (aref x j) s)) 
   
  (return x)))
